params <- c("beta","theta")
#4. Start JAGS
jagsfit1<- jags(data       = jags_data ,
inits      = inits,
parameters = params,
model      = textConnection(Beta),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
print(jagsfit1,justify = "left", digits=2)
xb<- -1+0.25*x1+4*x2
p<-1/(1+exp(-xb))
shape1<-(theta*p)
shape2<-(theta*(1-p))
y <- rbeta(12,shape1,shape2)
betadata<-data.frame(y,x1,x2)
X <- model.matrix(~x1 + x2+x3, data=betadata)
K <- ncol(X)
nobs <- nrow(betadata)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs)
betareg(y~x1+x2,data=betadata)
require(R2jags)
require(betareg)
y <- rbeta(12,1,1)
x1 <- c(1,1,1,1,1,1,0,0,0,0,0,0)
x2 <- c(1,1,0,0,1,1,0,0,1,1,0,0)
x3 <- c(1,0,1,0,1,0,1,0,1,0,1,0)
betadata<-data.frame(y,x1,x2,x3)
data(betadata)
X <- model.matrix(~x1 + x2+x3, data=betadata)
K <- ncol(X)
nobs <- nrow(betadata)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs)
betareg(y~x1+x2+x3,data=betadata)
Beta<-"model{
#1. Priors
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
theta~dgamma(0.01,0.01)
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbeta(shape1[i],shape2[i])
shape1[i]<-theta*pi[i]
shape2[i]<-theta*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}"
inits  <- function () {
list(
beta  = rnorm(ncol(X), 0, 0.1)  )  }
params <- c("beta","theta")
#4. Start JAGS
jagsfit1<- jags(data       = jags_data ,
inits      = inits,
parameters = params,
model      = textConnection(Beta),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
print(jagsfit1,justify = "left", digits=2)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
require(runjags)
require(rjags)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,5)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
eta <- beta1+beta2*x1
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1)
X <- model.matrix(~ x1, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-coda.samples(L0,params,n.iter=5000, thin = 1)
print(L1, intervals=c(0.025, 0.975), digits=3)
L0 <- run.jags("GLOGIT.txt",data = glogit.data,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
L0 <- run.jags("GLOGIT.txt",data = glogit.data,
monitor = params,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
load.module("bugs")
run.jags("GLOGIT.txt",data = glogit.data,
monitor = params,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
jags.samples("GLOGIT.txt",data = glogit.data,
monitor = params,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-jags.samples(L0,params,n.iter=5000, thin = 1)
require(rjags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,5)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
eta <- beta1+beta2*x1
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1)
X <- model.matrix(~ x1, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-jags.samples(L0,params,n.iter=5000, thin = 1)
print(L1, intervals=c(0.025, 0.975), digits=3)
list.modules()
load.module("bugs")
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-jags.samples(L0,params,n.iter=5000, thin = 1)
print(L1, intervals=c(0.025, 0.975), digits=3)
load.module("bugs")
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
rpois(nobs,5)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
rpois(nobs,5)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,10)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
eta <- beta1+beta2*x1
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1)
X <- model.matrix(~ x1, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbin(p[i],m[i])
p[i]~dbeta(shape1[i],shape2[i])
shape1[i]<-sigma*pi[i]
shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags(data = glogit.data,
inits = inits,
parameters = params,
model.file = "GLOGIT.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 3000,
n.iter   = 5000)
print(L0, intervals=c(0.025, 0.975), digits=3)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,10)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
beta3 <- 3
eta <- beta1+beta2*x1+beta3*x2
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1,x2)
X <- model.matrix(~ x1+x2, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbin(p[i],m[i])
p[i]~dbeta(shape1[i],shape2[i])
shape1[i]<-sigma*pi[i]
shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags(data = glogit.data,
inits = inits,
parameters = params,
model.file = "GLOGIT.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 3000,
n.iter   = 5000)
print(L0, intervals=c(0.025, 0.975), digits=3)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,10)
x1=runif(nobs)
x2=runif(nobs)
beta1 <- -2
beta2 <- -1.5
beta3 <- 3
eta <- beta1+beta2*x1+beta3*x2
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1,x2)
X <- model.matrix(~ x1+x2, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbin(p[i],m[i])
p[i]~dbeta(shape1[i],shape2[i])
shape1[i]<-sigma*pi[i]
shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags(data = glogit.data,
inits = inits,
parameters = params,
model.file = "GLOGIT.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 3000,
n.iter   = 5000)
print(L0, intervals=c(0.025, 0.975), digits=3)
library(mixtools)
library(mclust)
data<-read.table("data_index_AMADA.txt",header=TRUE)
g.r<-data$g.r
FUV<-data$FUV.NUV
mixmdl = normalmixEM(g.r)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/UV_Optical/scripts")
library(mixtools)
library(mclust)
data<-read.table("data_index_AMADA.txt",header=TRUE)
g.r<-data$g.r
FUV<-data$FUV.NUV
mixmdl = normalmixEM(g.r)
pdf("gr.pdf",height = 8,width = 8)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
library(mixtools)
library(mclust)
data<-read.table("data_index_AMADA.txt",header=TRUE)
g.r<-data$g.r
FUV<-data$FUV.NUV
mixmdl = normalmixEM(g.r)
#pdf("gr.pdf",height = 8,width = 8)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
#dev.off()
