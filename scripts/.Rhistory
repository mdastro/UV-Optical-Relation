<<<<<<< HEAD
n.iter     = 10000,
n.thin     = 1,
n.burnin   = 5000)
print(N, intervals=c(0.025, 0.975), digits=3)
Dados<-as.mcmc(N)
Clust1<-as.numeric(Dados[[1]][,"pClust[1]"])
denplot(N, "muOfClust")
Dados
Dados[1,]
Dados[1:3,]
require(R2jags)
require(ggplot2)
require(mcmcplots)
require(jagstools)
# Read data
dat<-read.table("Tabela",header = T)
plot(dat$FLUX_L,dat$FLUX_C,log="xy")
yn <-dat$FLUX_L
x <- dat$FLUX_C
require(flexmix)
fit<-flexmix(formula =FLUX_L ~ FLUX_C + I(FLUX_C^2), data = dat,
k = 2,model = FLXMRglm(family = "Gamma"))
# Plot----------------
dat$cluster<-as.factor(fit@cluster)
nobs = nrow(dat)
obsx1 <- dat$FLUX_C
errx1 <- dat$FLUXERR_C
obsy  <- dat$FLUX_L
erry <- dat$FLUXERR_L
type <- as.numeric(dat$cluster)
K   <- 2
require(R2jags)
require(ggplot2)
require(mcmcplots)
require(jagstools)
# Read data
dat<-read.table("Tabela",header = T)
plot(dat$FLUX_L,dat$FLUX_C,log="xy")
yn <-dat$FLUX_L
x <- dat$FLUX_C
require(flexmix)
fit<-flexmix(formula =FLUX_L ~ FLUX_C + I(FLUX_C^2), data = dat,
k = 2,model = FLXMRglm(family = "Gamma"))
# Plot----------------
dat$cluster<-as.factor(fit@cluster)
nobs = nrow(dat)
obsx1 <- dat$FLUX_C
errx1 <- dat$FLUXERR_C
obsy  <- dat$FLUX_L
erry <- dat$FLUXERR_L
type <- as.numeric(dat$cluster)
K   <- 2
# Prepare data for prediction
M=500
xx1 = seq(from = min(obsx1[which(type==1)]),
to = max(obsx1[which(type==1)]),
length.out = M)
xx2 = seq(from = min(obsx1[which(type==2)]),
to = max(obsx1[which(type==2)]),
length.out = M)
MyData <- data.frame(x=xx1)
X1 <- model.matrix(~ 1 + x, data = MyData)
# Prepare data to JAGS
jags_data <- list(
obsx1 = obsx1,
obsy = obsy,
errx1=errx1,
erry=erry,
N = nobs,
type = type,
M = M,
xx1=xx1,
xx2 = xx2
)
# Normal Model
LNORM_errors<-"model{
# Diffuse prior for beta coefficients
for(j in 1:2){
for(k in 1:2){
beta[k,j]~dnorm(mu0, tau0)
}
mu0~dnorm(0,0.1)
tau0~dgamma(1e-3,1e-3)
# Gamma prior for standard deviation
tau <- pow(sigma,-2)          # precision
sigma ~ dgamma(1e-3,1e-3)     # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dlnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dlnorm(mu[i],tau)
#obsy[i]~dlnorm(mu[i],tau)
obsx1[i]~dlnorm(x1[i],pow(errx1[i],-2))
mu[i] <-beta[1,type[i]]+beta[2,type[i]]*x1[i]
}
# Prediction new data
#for (j in 1:M){
#mux1[j]<-beta[1,1]+beta[2,1]*xx1[j]
#mux2[j]<-beta[1,2]+beta[2,2]*xx2[j]
#Yx1[j]~dlnorm(mux1[j],tau)
#Yx2[j]~dlnorm(mux2[j],tau)
#}
}"
# set initial values
inits <- function () {
list(
beta = matrix(rnorm(4, 0, 0.01),ncol=2))
}
# define parameters
params0 <- c("beta", "sigma")
# fit
LNORM <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(LNORM_errors),
n.chains   = 4,
n.iter     = 20000,
n.thin     = 1,
n.burnin   = 10000)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Horacio")
require(R2jags)
require(ggplot2)
require(mcmcplots)
require(jagstools)
# Read data
dat<-read.table("Tabela",header = T)
plot(dat$FLUX_L,dat$FLUX_C,log="xy")
yn <-dat$FLUX_L
x <- dat$FLUX_C
require(flexmix)
fit<-flexmix(formula =FLUX_L ~ FLUX_C + I(FLUX_C^2), data = dat,
k = 2,model = FLXMRglm(family = "Gamma"))
# Plot----------------
dat$cluster<-as.factor(fit@cluster)
nobs = nrow(dat)
obsx1 <- dat$FLUX_C
errx1 <- dat$FLUXERR_C
obsy  <- dat$FLUX_L
erry <- dat$FLUXERR_L
type <- as.numeric(dat$cluster)
K   <- 2
# Prepare data for prediction
M=500
xx1 = seq(from = min(obsx1[which(type==1)]),
to = max(obsx1[which(type==1)]),
length.out = M)
xx2 = seq(from = min(obsx1[which(type==2)]),
to = max(obsx1[which(type==2)]),
length.out = M)
MyData <- data.frame(x=xx1)
X1 <- model.matrix(~ 1 + x, data = MyData)
# Prepare data to JAGS
jags_data <- list(
obsx1 = obsx1,
obsy = obsy,
errx1=errx1,
erry=erry,
N = nobs,
type = type,
M = M,
xx1=xx1,
xx2 = xx2
)
# Normal Model
LNORM_errors<-"model{
# Diffuse prior for beta coefficients
for(j in 1:2){
for(k in 1:2){
beta[k,j]~dnorm(mu0, tau0)
}
mu0~dnorm(0,0.1)
tau0~dgamma(1e-3,1e-3)
# Gamma prior for standard deviation
tau <- pow(sigma,-2)          # precision
sigma ~ dgamma(1e-3,1e-3)     # standard deviation
# Diffuse normal priors for true x
for (i in 1:N){
x1[i]~dlnorm(0,1e-3)
}
# Likelihood function
for (i in 1:N){
obsy[i]~dnorm(y[i],pow(erry[i],-2))
y[i]~dlnorm(mu[i],tau)
#obsy[i]~dlnorm(mu[i],tau)
obsx1[i]~dlnorm(x1[i],pow(errx1[i],-2))
mu[i] <-beta[1,type[i]]+beta[2,type[i]]*x1[i]
}
# Prediction new data
#for (j in 1:M){
#mux1[j]<-beta[1,1]+beta[2,1]*xx1[j]
#mux2[j]<-beta[1,2]+beta[2,2]*xx2[j]
#Yx1[j]~dlnorm(mux1[j],tau)
#Yx2[j]~dlnorm(mux2[j],tau)
#}
}"
# set initial values
inits <- function () {
list(
beta = matrix(rnorm(4, 0, 0.01),ncol=2))
}
# define parameters
params0 <- c("beta", "sigma")
# fit
LNORM <- jags(
data       = jags_data,
inits      = inits,
parameters = params0,
model      = textConnection(LNORM_errors),
n.chains   = 4,
n.iter     = 20000,
n.thin     = 1,
n.burnin   = 10000)
LNORM
out<-LNORM$BUGSoutput
beta.mcmc <- out$sims.list$beta
beta.mcmc
t(beta.mcmc)
LNORM
UV_dat <- read.table("..//data_trial/output_results.txt",header=T)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/UV_Optical/scripts")
UV_dat <- read.table("..//data_trial/output_results.txt",header=T)
UV_dat[1,]
x1 <- UV_dat$fuv_mag
y <- UV_dat$dered_g-UV_dat$dered_r
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
plot(jagsfit)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="#de2d26",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("orange3"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("orange"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="cyan4",size=1,alpha=0.35)+
geom_point(size=1.5,colour="red3")+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray40"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray70"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
ggplot(normdata,aes(x=x1,y=y))+ geom_point(colour="cyan4",size=1,alpha=0.35)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray40"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray70"),show.legend=FALSE) +
geom_point(size=1.5,colour="red3")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray40"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray70"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")
UV_dat$dered_g-UV_dat$dered_r
y <- UV_dat$fuv_mag
x1 <- UV_dat$dered_g-UV_dat$dered_r
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")
y <- UV_dat$fuv_mag-UV_dat$dered_r
x1 <- UV_dat$dered_g-UV_dat$dered_r
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
denplot(jagsfit,"beta")
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.5,colour="cyan4")+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3.5,colour="cyan4",alpha=0.2)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan4",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan2",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
=======
params <- c("beta","theta")
#4. Start JAGS
jagsfit1<- jags(data       = jags_data ,
inits      = inits,
parameters = params,
model      = textConnection(Beta),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
print(jagsfit1,justify = "left", digits=2)
xb<- -1+0.25*x1+4*x2
p<-1/(1+exp(-xb))
shape1<-(theta*p)
shape2<-(theta*(1-p))
y <- rbeta(12,shape1,shape2)
betadata<-data.frame(y,x1,x2)
X <- model.matrix(~x1 + x2+x3, data=betadata)
K <- ncol(X)
nobs <- nrow(betadata)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs)
betareg(y~x1+x2,data=betadata)
require(R2jags)
require(betareg)
y <- rbeta(12,1,1)
x1 <- c(1,1,1,1,1,1,0,0,0,0,0,0)
x2 <- c(1,1,0,0,1,1,0,0,1,1,0,0)
x3 <- c(1,0,1,0,1,0,1,0,1,0,1,0)
betadata<-data.frame(y,x1,x2,x3)
data(betadata)
X <- model.matrix(~x1 + x2+x3, data=betadata)
K <- ncol(X)
nobs <- nrow(betadata)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs)
betareg(y~x1+x2+x3,data=betadata)
Beta<-"model{
#1. Priors
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
theta~dgamma(0.01,0.01)
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbeta(shape1[i],shape2[i])
shape1[i]<-theta*pi[i]
shape2[i]<-theta*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}"
inits  <- function () {
list(
beta  = rnorm(ncol(X), 0, 0.1)  )  }
params <- c("beta","theta")
#4. Start JAGS
jagsfit1<- jags(data       = jags_data ,
inits      = inits,
parameters = params,
model      = textConnection(Beta),
n.thin     = 1,
n.chains   = 3,
n.burnin   = 2500,
n.iter     = 5000)
print(jagsfit1,justify = "left", digits=2)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
require(runjags)
require(rjags)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,5)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
eta <- beta1+beta2*x1
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1)
X <- model.matrix(~ x1, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-coda.samples(L0,params,n.iter=5000, thin = 1)
print(L1, intervals=c(0.025, 0.975), digits=3)
L0 <- run.jags("GLOGIT.txt",data = glogit.data,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
L0 <- run.jags("GLOGIT.txt",data = glogit.data,
monitor = params,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
load.module("bugs")
run.jags("GLOGIT.txt",data = glogit.data,
monitor = params,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
jags.samples("GLOGIT.txt",data = glogit.data,
monitor = params,
inits = inits,
thin = 1,
n.chains = 3,
burnin = 3000,
sample   = 5000)
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-jags.samples(L0,params,n.iter=5000, thin = 1)
require(rjags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,5)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
eta <- beta1+beta2*x1
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1)
X <- model.matrix(~ x1, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-jags.samples(L0,params,n.iter=5000, thin = 1)
print(L1, intervals=c(0.025, 0.975), digits=3)
list.modules()
load.module("bugs")
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
#,
#           thin = 1,
##          n.chains = 3,
#         burnin = 3000,
#        sample   = 5000)
L1<-jags.samples(L0,params,n.iter=5000, thin = 1)
print(L1, intervals=c(0.025, 0.975), digits=3)
load.module("bugs")
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbetabin(sigma*pi[i],sigma*(1-pi[i]),m[i])
#    Y[i] ~ dbin(p[i],m[i])
#    p[i]~dbeta(shape1[i],shape2[i])
#    shape1[i]<-sigma*pi[i]
#   shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags.model("GLOGIT.txt",data = glogit.data,
inits = inits
)
rpois(nobs,5)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
rpois(nobs,5)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,10)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
eta <- beta1+beta2*x1
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1)
X <- model.matrix(~ x1, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbin(p[i],m[i])
p[i]~dbeta(shape1[i],shape2[i])
shape1[i]<-sigma*pi[i]
shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags(data = glogit.data,
inits = inits,
parameters = params,
model.file = "GLOGIT.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 3000,
n.iter   = 5000)
print(L0, intervals=c(0.025, 0.975), digits=3)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,10)
x1=runif(nobs)
beta1 <- -2
beta2 <- -1.5
beta3 <- 3
eta <- beta1+beta2*x1+beta3*x2
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1,x2)
X <- model.matrix(~ x1+x2, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbin(p[i],m[i])
p[i]~dbeta(shape1[i],shape2[i])
shape1[i]<-sigma*pi[i]
shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags(data = glogit.data,
inits = inits,
parameters = params,
model.file = "GLOGIT.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 3000,
n.iter   = 5000)
print(L0, intervals=c(0.025, 0.975), digits=3)
# JAGS Beta Binomial Model
############### Required packages
require(R2jags)
require(boot)
require(VGAM)
############### Simulation
set.seed(33559)
nobs=2500
m=1+rpois(nobs,10)
x1=runif(nobs)
x2=runif(nobs)
beta1 <- -2
beta2 <- -1.5
beta3 <- 3
eta <- beta1+beta2*x1+beta3*x2
sigma <- 20
p <- inv.logit(eta)
shape1=sigma*p
shape2=sigma*(1-p)
y<-rbetabinom.ab(n=nobs, size=m, shape1=shape1, shape2=shape2)
bindata=data.frame(y=y,m=m,x1,x2)
X <- model.matrix(~ x1+x2, data = bindata)
K <- ncol(X)
glogit.data <- list(Y  = bindata$y,
N    = nrow(bindata),
X    = X,
K    = K,
m   =  m
)
sink("GLOGIT.txt")
cat("
model{
# Diffuse normal priors betas
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001)}
#  Prior for theta
sigma~dgamma(0.01,0.01)
for (i in 1:N){
Y[i] ~ dbin(p[i],m[i])
p[i]~dbeta(shape1[i],shape2[i])
shape1[i]<-sigma*pi[i]
shape2[i]<-sigma*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
}
}
",fill = TRUE)
sink()
inits <- function () {
list(
beta  = rnorm(K, 0, 0.1)
)  }
params <- c("beta", "sigma")
L0 <- jags(data = glogit.data,
inits = inits,
parameters = params,
model.file = "GLOGIT.txt",
n.thin = 1,
n.chains = 3,
n.burnin = 3000,
n.iter   = 5000)
print(L0, intervals=c(0.025, 0.975), digits=3)
library(mixtools)
library(mclust)
data<-read.table("data_index_AMADA.txt",header=TRUE)
g.r<-data$g.r
FUV<-data$FUV.NUV
mixmdl = normalmixEM(g.r)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/UV_Optical/scripts")
library(mixtools)
library(mclust)
data<-read.table("data_index_AMADA.txt",header=TRUE)
g.r<-data$g.r
FUV<-data$FUV.NUV
mixmdl = normalmixEM(g.r)
pdf("gr.pdf",height = 8,width = 8)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
library(mixtools)
library(mclust)
data<-read.table("data_index_AMADA.txt",header=TRUE)
g.r<-data$g.r
FUV<-data$FUV.NUV
mixmdl = normalmixEM(g.r)
#pdf("gr.pdf",height = 8,width = 8)
plot(mixmdl,which=2,xlab2="g-r",ylab2="Densidade")
lines(density(g.r), lty=2, lwd=2)
#dev.off()
>>>>>>> origin/master
