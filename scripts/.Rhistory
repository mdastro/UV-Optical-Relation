n_spirals <-v_obs[i]*spirals
n_nospirals <- v_obs[i]*nospirals
post=dbeta(x,alpha+n_spirals, beta+n_nospirals)
like <- dbeta(x,n_spirals+1,n_nospirals+1)
m=max(c(prior,like,post))
plot(x,post,type="l", ylab="Density", lty=2, lwd=3,
ylim=c(0,m),col="red")
lines(x,like,lty=1, lwd=3,col="blue")
lines(x,prior,lty=3, lwd=3,col="green")
legend("topleft",c("Prior","Likelihood","Posterior",paste("Nobs=",v_obs[i]*spirals+v_obs[i]*nospirals,sep="")),
lty=c(3,1,2), lwd=c(3,3,3), col=c("green","blue","red"))
}
par(mfrow = c(2, 3))
par(cex = 0.6)
par(mar = c(3, 3, 2, 2), oma = c(1, 1, 1, 1))
v_obs<-c(1,5,25,50,100,500)
for(i in 1:6){
n_spirals <-v_obs[i]*spirals
n_nospirals <- v_obs[i]*nospirals
post=dbeta(x,alpha+n_spirals, beta+n_nospirals)
like <- dbeta(x,n_spirals+1,n_nospirals+1)
m=max(c(prior,like,post))
plot(x,post,type="l", ylab="Density", lty=2, lwd=3,
ylim=c(0,m),col="red")
lines(x,like,lty=1, lwd=3,col="blue")
lines(x,prior,lty=3, lwd=3,col="green")
legend("topleft",c("Prior","Likelihood","Posterior",paste("Nobs=",v_obs[i]*spirals+v_obs[i]*nospirals,sep="")),
lty=c(3,1,2,1), lwd=c(3,3,3,0), col=c("green","blue","red"))
}
#Previous knowledge
# Sample size
nobs <- 100
ftatooine <- 0.65
# 70% are spiral
#Prior
alpha <- 1+ftatooine*nobs
beta  <- 1+(1-ftatooine)*nobs
#Plot prior
x<-seq(.005, .995, length=500)
y <-dbeta(x, alpha,beta)
plot(x,y, type="l",ylab="prior",xlab=expression(f[Tatooine]),col="blue",lwd=3)
abline(v=0.65,lty=3,lwd=2)
prior <- dbeta(x,alpha,beta)
# 20 obs
nobs_new <- 20
ftatooine_new <- 0.75
tatooine <- ftatooine_new *nobs_new
notatooine <- (1-ftatooine_new)*nobs_new
x = seq(0.005, 0.995, length = 500)
like <- dbeta(x,tatooine+1,notatooine+1)
plot(x,like,type="l",col="blue")
abline(v=0.75,lty=3,lwd=2)
post=dbeta(x,alpha+tatooine, beta+notatooine)
m=max(c(prior,like,post))
plot(x,post,type="l", ylab="Density", lty=2, lwd=3,
ylim=c(0,m),col="red")
lines(x,like,lty=1, lwd=3,col="blue")
lines(x,prior,lty=3, lwd=3,col="green")
legend("topleft",c("Prior","Likelihood","Posterior"),
lty=c(3,1,2), lwd=c(3,3,3), col=c("green","blue","red"))
# Plot a mosaic
par(mfrow = c(2, 3))
par(cex = 0.6)
par(mar = c(3, 3, 2, 2), oma = c(1, 1, 1, 1))
v_obs<-c(1,5,25,50,100,500)
for(i in 1:6){
n_spirals <-v_obs[i]*tatooine
n_nospirals <- v_obs[i]*notatooine
post=dbeta(x,alpha+n_spirals, beta+n_nospirals)
like <- dbeta(x,n_spirals+1,n_nospirals+1)
m=max(c(prior,like,post))
plot(x,post,type="l", ylab="Density", lty=2, lwd=3,
ylim=c(0,m),col="red")
lines(x,like,lty=1, lwd=3,col="blue")
lines(x,prior,lty=3, lwd=3,col="green")
legend("topleft",c("Prior","Likelihood","Posterior",paste("Nobs=",v_obs[i]*tatooine+v_obs[i]*notatooine,sep="")),
lty=c(3,1,2,1), lwd=c(3,3,3,0), col=c("green","blue","red"))
}
#Plot prior
x<-seq(.005, .995, length=500)
y <-dbeta(x, alpha,beta)
plot(x,y, type="l",ylab="prior",xlab=expression(f[Tatooine]),col="blue",lwd=3)
abline(v=0.65,lty=3,lwd=2)
#Plot prior
x<-seq(.005, .995, length=500)
y <-dbeta(x, alpha,beta)
plot(x,y, type="l",ylab="prior",xlab=expression(f[Tatooine]),col="blue",lwd=3)
abline(v=0.65,lty=3,lwd=2)
alpha
beta
nobs_new <- 20
ftatooine_new <- 0.75
tatooine <- ftatooine_new *nobs_new
notatooine <- (1-ftatooine_new)*nobs_new
x = seq(0.005, 0.995, length = 500)
like <- dbeta(x,tatooine+1,notatooine+1)
plot(x,like,type="l",col="blue")
like <- dbeta(x,tatooine+1,notatooine+1)
plot(x,like,type="l",col="blue",xlab="Likelihood")
abline(v=0.75,lty=3,lwd=2)
plot(x,like,type="l",col="blue",ylab="Likelihood")
abline(v=0.75,lty=3,lwd=2)
plot(x,like,type="l",col="blue",ylab="Likelihood",xlab=expression(f[Tatooine]))
abline(v=0.75,lty=3,lwd=2)
tatooine+1
notatooine+1
1+0.75*20
1+(1-0.75)*20
post=dbeta(x,alpha+tatooine, beta+notatooine)
m=max(c(prior,like,post))
plot(x,post,type="l", ylab="Density", lty=2, lwd=3,
ylim=c(0,m),col="red")
lines(x,like,lty=1, lwd=3,col="blue")
lines(x,prior,lty=3, lwd=3,col="green")
legend("topleft",c("Prior","Likelihood","Posterior"),
lty=c(3,1,2), lwd=c(3,3,3), col=c("green","blue","red"))
library(coda)
# First example.
set.seed(47405)
nstep = 1000
x = rnorm(nstep)
effectiveSize(x)
xmy = x
xmy[2:nstep] = xmy[2:nstep] + 1.0 * xmy[1:(nstep-1)]
effectiveSize(xmy)
xpy = rnorm(length(x))
muOne = xpy - xmy
muTwo = xpy + xmy
effectiveSize(muOne)
effectiveSize(muTwo)
effectiveSize(muOne-muTwo)
# Plot result:
layout(matrix(1:2,nrow=1))
par(pty="s")
plot( muOne , muTwo , type="o" , asp=1 ,
xlab=bquote(mu[1]) , ylab=bquote(mu[2]) ,
main=bquote(atop(
list(
ESS[mu[1]]==.(round(effectiveSize(muOne),0)) ,
ESS[mu[2]]==.(round(effectiveSize(muTwo),0)) ) ,
list(
ESS[mu[1]-mu[2]]==.(round(effectiveSize(muOne-muTwo),0)) ,
ESS[mu[1]+mu[2]]==.(round(effectiveSize(muOne+muTwo),0)) )
)) ,
cex.lab=1.5 , cex.main=1.0 )
text( min(muOne) , min(muTwo) , adj=c(0,0) ,
labels=bquote(r[list(mu[1],mu[2])]==.(round(cor(muOne,muTwo),2))) )
library(coda)
# First example.
set.seed(47405)
nstep = 1000
x = rnorm(nstep)
effectiveSize(x)
xmy = x
xmy[2:nstep] = xmy[2:nstep] + 1.0 * xmy[1:(nstep-1)]
effectiveSize(xmy)
xpy = rnorm(length(x))
muOne = xpy - xmy
muTwo = xpy + xmy
effectiveSize(muOne)
effectiveSize(muTwo)
effectiveSize(muOne-muTwo)
# Plot result:
par(pty="s")
plot( muOne , muTwo , type="o" , asp=1 ,
xlab=bquote(mu[1]) , ylab=bquote(mu[2]) ,
main=bquote(atop(
list(
ESS[mu[1]]==.(round(effectiveSize(muOne),0)) ,
ESS[mu[2]]==.(round(effectiveSize(muTwo),0)) ) ,
list(
ESS[mu[1]-mu[2]]==.(round(effectiveSize(muOne-muTwo),0)) ,
ESS[mu[1]+mu[2]]==.(round(effectiveSize(muOne+muTwo),0)) )
)) ,
cex.lab=1.5 , cex.main=1.0 )
text( min(muOne) , min(muTwo) , adj=c(0,0) ,
labels=bquote(r[list(mu[1],mu[2])]==.(round(cor(muOne,muTwo),2))) )
library(coda)
# First example.
set.seed(47405)
nstep = 100
x = rnorm(nstep)
effectiveSize(x)
xmy = x
library(coda)
# First example.
set.seed(47405)
nstep = 100
x = rnorm(nstep)
effectiveSize(x)
xmy = x
xmy[2:nstep] = xmy[2:nstep] + 1.0 * xmy[1:(nstep-1)]
effectiveSize(xmy)
xpy = rnorm(length(x))
muOne = xpy - xmy
muTwo = xpy + xmy
effectiveSize(muOne)
effectiveSize(muTwo)
effectiveSize(muOne-muTwo)
# Plot result:
par(pty="s")
plot( muOne , muTwo , type="o" , asp=1 ,
xlab=bquote(mu[1]) , ylab=bquote(mu[2]) ,
main=bquote(atop(
list(
ESS[mu[1]]==.(round(effectiveSize(muOne),0)) ,
ESS[mu[2]]==.(round(effectiveSize(muTwo),0)) ) ,
list(
ESS[mu[1]-mu[2]]==.(round(effectiveSize(muOne-muTwo),0)) ,
ESS[mu[1]+mu[2]]==.(round(effectiveSize(muOne+muTwo),0)) )
)) ,
cex.lab=1.5 , cex.main=1.0 )
text( min(muOne) , min(muTwo) , adj=c(0,0) ,
labels=bquote(r[list(mu[1],mu[2])]==.(round(cor(muOne,muTwo),2))) )
rnorm(length(x))
effectiveSize(x)
x
effectiveSize(xmy)
xpy = rnorm(length(x))
xpy - xmy
# From Bayesian Models for Astrophysical Data
require(R2jags)
require(jagstools)
require(ggplot2)
# Read data
UV_dat <- read.table("..//data_trial/output_results.txt",header=T)
y <- UV_dat$fuv_mag-UV_dat$dered_r
x1 <- UV_dat$dered_g-UV_dat$dered_r
nobs<-nrow(UV_dat)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/UV_Optical/scripts")
# From Bayesian Models for Astrophysical Data
require(R2jags)
require(jagstools)
require(ggplot2)
# Read data
UV_dat <- read.table("..//data_trial/output_results.txt",header=T)
y <- UV_dat$fuv_mag-UV_dat$dered_r
x1 <- UV_dat$dered_g-UV_dat$dered_r
nobs<-nrow(UV_dat)
# Prepare data for prediction
M=500
xx = seq(from =  min(x1),
to =  max(x1),
length.out = M)
X <- model.matrix(~ 1 + x1)
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
X <- model.matrix(~ 1 + x1+I(x^2))
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]+beta[3]*xx[j]^2
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
K
X <- model.matrix(~ 1 + x1+I(x^2))
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
K
X <- model.matrix(~ 1 + x1+I(x1^2))
K <- ncol(X)
jags_data <- list(Y = y,
X  = X,
K  = K,
N  = nobs,
M = M,
xx= xx)
NORM <-" model{
# Diffuse normal priors for predictors
for (i in 1:K) { beta[i] ~ dnorm(0, 0.0001) }
# Uniform prior for standard deviation
tau <- pow(sigma, -2)       # precision
sigma ~ dunif(0, 100)       # standard deviation
# Likelihood function
for (i in 1:N){
Y[i]~dnorm(mu[i],tau)
mu[i]  <- eta[i]
eta[i] <- inprod(beta[], X[i,])
}
# Prediction for new data
for (j in 1:M){
etax[j]<-beta[1]+beta[2]*xx[j]+beta[3]*xx[j]^2
mux[j]  <- etax[j]
Yx[j]~dnorm(mux[j],tau)
}
}"
inits <- function () {
list(
beta = rnorm(K, 0, 0.01))
}
params <- c("beta", "sigma","Yx")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('Yx'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
params <- c("beta", "sigma","mux")
jagsfit <- jags(
data       = jags_data,
inits      = inits,
parameters = params,
model      = textConnection(NORM),
n.chains   = 3,
n.iter     = 5000,
n.thin     = 1,
n.burnin   = 2500)
print(jagsfit,justify = "left", digits=2)
# Plot
yx <- jagsresults(x=jagsfit, params=c('mux'))
normdata <- data.frame(x1,y)
gdata <- data.frame(x =xx, mean = yx[,"mean"],lwr1=yx[,"25%"],lwr2=yx[,"2.5%"],upr1=yx[,"75%"],upr2=yx[,"97.5%"])
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=3,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_point(size=1.25,colour="cyan3",alpha=0.4)+
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_point(size=1.25,colour="cyan3",alpha=0.4)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_point(size=1.25,colour="red3",alpha=0.4)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.35, fill = c("gray80"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
ggplot(normdata,aes(x=x1,y=y))+
geom_point(size=1.25,colour="red3",alpha=0.4)+
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr1, ymax=upr1,y=NULL), alpha=0.95, fill=c("gray60"),show.legend=FALSE) +
geom_ribbon(data=gdata,aes(x=xx,ymin=lwr2, ymax=upr2,y=NULL), alpha=0.75, fill = c("gray80"),show.legend=FALSE) +
geom_line(data=gdata,aes(x=xx,y=mean),colour="gray25",linetype="dashed",size=1,show.legend=FALSE)+
theme_bw()+xlab("g-r")+ylab("FUV-r")+coord_cartesian(xlim=c(-1,1.5),ylim=c(0,6))
